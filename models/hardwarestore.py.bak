db.define_table('supplier',
    Field('name', 'string', requires=(IS_NOT_EMPTY(),
	IS_NOT_IN_DB(db, 'supplier.name'))),
    Field('address', 'string', requires=IS_NOT_EMPTY())
)

db.define_table('product',
    Field('name', 'string',
	requires=(IS_NOT_IN_DB(db, 'product.name'))),
    Field('inStock', 'integer', requires=IS_NOT_EMPTY()),
    Field('price', 'double', requires=IS_NOT_EMPTY()),
    Field('onOrder', 'integer', default=0),
    Field('supplier', db.supplier, requires=IS_NOT_EMPTY()),
    format='%(name)s'
)

db.define_table('contact',
    Field('name', 'string', requires=(IS_NOT_EMPTY(),
	IS_NOT_IN_DB(db, 'contact.name'))),
    Field('phone', 'string'),
    Field('email', 'string', requires=(IS_EMPTY_OR(IS_EMAIL()))),
    Field('description', 'string'),
    Field('supplierID', 'integer', requires=IS_NOT_EMPTY())
)

db.define_table('costomer',
    Field('name', 'string', requires=(IS_NOT_EMPTY(),
	IS_NOT_IN_DB(db, 'costomer.name'))),
    Field('phone', 'string'),
    Field('email', 'string', requires=(IS_EMPTY_OR(IS_EMAIL())))
)

db.define_table('purchases',
    Field('costomerID', 'integer', requires=IS_NOT_EMPTY()),
    Field('datePurchased', 'date', requires=IS_NOT_EMPTY()),
    Field('total', 'double')
)

db.define_table('itemsBought',
    Field('PurchaseID', 'integer', requires=IS_NOT_EMPTY()),
    Field('price', 'integer', requires=IS_NOT_EMPTY()),
    Field('quantity', 'integer', requires=IS_NOT_EMPTY()),
    Field('product', db.product),
    format='%(name)s'
)



#~ db.define_table('category',
    #~ Field('name', requires=(IS_SLUG(), \
	#~ # no special symbols, possible URL
	#~ IS_LOWER(),\
	#~ # lower case
	#~ IS_NOT_IN_DB(db, 'category.name'))))
#~ 
#~ db.define_table('post',
    #~ Field('category', 'reference category', writable=False, readable=False),
    #~ Field('title', 'string', requires=IS_NOT_EMPTY()),
    #~ Field('url', requires=IS_EMPTY_OR(IS_URL())),
    #~ Field('body', 'text', requires=IS_NOT_EMPTY()),
    #~ Field('votes', 'integer', default=0, readable=False, writable=False),
    #~ auth.signature) # created_on, created_by, 
		    #~ # modified_on, modified by,
		    #~ # is_active: check whether to show or not
#~ 
#~ db.define_table('vote',
    #~ Field('post', 'reference post'),
    #~ Field('score', 'integer', default=+1),
    #~ auth.signature)
#~ 
#~ # comm = comment; comment is keyword db backend; don't use
#~ db.define_table('comm', 
     #~ Field('post', 'reference post'),
     #~ Field('parent_comm', 'reference comm', default=None),
     #~ Field('score', 'integer', default=+1),
     #~ auth.signature)
#~ 
#~ POSTS_PER_PAGE = 10 # a constant
